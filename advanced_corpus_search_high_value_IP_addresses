"""
# README: Google Threat Intelligence (GTI) Corpus Search Script

## Overview
This Python script is designed for proof-of-concept (PoC) use to interact with the Google Threat Intelligence (GTI) API. It performs an advanced corpus search for IP addresses with high GTI scores and saves the relevant data to a unique, timestamped CSV file. It also prints a summary and a single full example of a result to the console.

**Disclaimer:** This code is for PoC purposes only and is not intended for use in a production environment.

## Features
- **Interactive Input:** Prompts the user to enter their GTI API key and a custom search query. A default search query is provided for convenience.
- **Dynamic File Naming:** Creates a unique CSV filename with a timestamp (e.g., `gti_results_YYYYMMDD_HHMMSS.csv`) to prevent overwriting previous results.
- **Pagination:** Automatically handles paginated results to retrieve all matching records without a total limit.
- **Sample Output:** Prints the full JSON for the first result to the console for detailed inspection.
- **CSV Export:** Saves all retrieved results to a CSV file, including the IP address, country, threat score, positive detections, and a human-readable last modification date.
- **Safe to Share:** The script does not embed any API keys, making it safe to share publicly.

## Prerequisites
- Python 3.x
- `requests` library: To install, run `pip install requests`

## How to Use
1.  **Save the file:** Save the code as a Python file (e.g., `gti_search.py`).
2.  **Run from the command line:** Open your terminal or command prompt and execute the script:
    `python gti_search.py`
3.  **Enter your API key:** When prompted, paste your Google Threat Intelligence API key and press Enter.
4.  **Enter your search query:** You can either type a specific query or simply press Enter to use the default search: `entity:ip last_modification_date:7d+ and gti_score:90+`.
5.  **View results:** The script will print its progress, a summary of all results, and a detailed view of the first item. The CSV file will be saved in the same directory.

## CSV Output Fields
- **IP_Address:** The IP address of the result.
- **Country:** The country associated with the IP address.
- **Threat_Score:** The threat score assigned by Google Threat Intelligence.
- **Positive_Detections:** The number of antivirus engines that flagged the IP as malicious.
- **Last_Modification:** The date and time the IOC was last modified, in `mm/dd/yy hh:mm` format.

## Customization
- **Default Query:** The `default_query` variable in the `main` function can be changed to a different search query.
"""

import requests
import urllib.parse
import json
import time
import csv
import sys
import os
from datetime import datetime

# The base URL for the Google Threat Intelligence (GTI) API
BASE_URL = "https://www.virustotal.com/api/v3"

def gti_corpus_search(api_key, query, x_tool, limit=300):
    """
    Searches the Google Threat Intelligence advanced corpus with pagination
    until all matching results are retrieved.

    Args:
        api_key (str): Your Google Threat Intelligence API key.
        query (str): The search query string.
        x_tool (str): The x-tool header for the request.
        limit (int): The maximum number of results to return per page.

    Returns:
        list: A list of dictionaries containing the search results.
    """
    encoded_query = urllib.parse.quote_plus(query)
    all_results = []
    cursor = None
    
    print(f"Starting Google Threat Intelligence search for query: '{query}'")
    print("-" * 50)
    
    page_count = 1
    while True:
        url = f"{BASE_URL}/intelligence/search?query={encoded_query}&limit={limit}"
        if cursor:
            url += f"&cursor={cursor}"

        headers = {
            "x-apikey": api_key,
            "x-tool": x_tool,
            "Accept": "application/json"
        }

        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            
            page_results = data.get("data", [])
            all_results.extend(page_results)

            # Display progress
            total_fetched = len(all_results)
            print(f"[{total_fetched} IOCs retrieved] - Page {page_count}: Fetched {len(page_results)} results.")
            
            cursor = data.get("links", {}).get("next")
            if not cursor:
                print("No more pages to retrieve. Search complete.")
                break
            
            url = cursor
            cursor = None  # Resetting cursor as we now have the full URL
            page_count += 1
            
            time.sleep(1) # Pause to avoid hitting rate limits
        except requests.exceptions.RequestException as e:
            print(f"Error during API request: {e}", file=sys.stderr)
            break
            
    return all_results

def save_results_to_csv(results):
    """
    Saves the search results to a CSV file, with a unique filename.

    Args:
        results (list): A list of dictionaries containing the search results.
    """
    if not results:
        print("No results to save to CSV.")
        return

    # Create a unique filename with a timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_filename = f"gti_results_{timestamp}.csv"
    
    headers = ["IP_Address", "Country", "Threat_Score", "Positive_Detections", "Last_Modification"]
    
    try:
        with open(csv_filename, "w", newline="", encoding="utf-8") as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(headers)
            
            for item in results:
                item_id = item.get("id", "N/A")
                attributes = item.get("attributes", {})
                
                country = attributes.get("country", "N/A")
                threat_score = attributes.get("gti_assessment", {}).get("threat_score", {}).get("value", "N/A")
                positive_detections = attributes.get("last_analysis_stats", {}).get("malicious", "N/A")
                
                # Convert the Unix timestamp to a human-readable format
                last_mod_timestamp = attributes.get("last_modification_date")
                last_modification = "N/A"
                if last_mod_timestamp:
                    last_modification = datetime.fromtimestamp(last_mod_timestamp).strftime("%m/%d/%y %H:%M")
                
                writer.writerow([item_id, country, threat_score, positive_detections, last_modification])
        print(f"Results saved to '{csv_filename}' successfully.")
    except IOError as e:
        print(f"An error occurred while writing the CSV file: {e}", file=sys.stderr)

def main():
    """
    Main function to handle user input, execute the search, and process results.
    """
    print("Disclaimer: This script is intended for proof-of-concept use only and should not be used in a production environment.")
    
    # Ask for API key
    api_key = input(f"Enter your Google Threat Intelligence API key: ").strip()
    
    # Ask for search query with a default value
    default_query = "entity:ip last_modification_date:7d+ and gti_score:90+"
    query_input = input(f"Enter your search query (press Enter for default: '{default_query}'): ").strip()
    query = query_input if query_input else default_query
    
    # The x-tool header from a prior instruction
    x_tool = "muybien"

    results = gti_corpus_search(api_key, query, x_tool)
    
    # Print the first example
    if results:
        print("\nDisplaying the first result in full detail:")
        print("-" * 50)
        print(json.dumps(results[0], indent=4))
        print("-" * 50)
        
        print("\nSummary of all results:")
        print("-" * 110)
        print(f"{'IP Address':<20} | {'Country':<5} | {'Threat Score':<12} | {'Positive Detections':<20} | {'Last Modification':<18}")
        print("-" * 110)
        for item in results:
            item_id = item.get("id", "N/A")
            attributes = item.get("attributes", {})
            country = attributes.get("country", "N/A")
            threat_score = attributes.get("gti_assessment", {}).get("threat_score", {}).get("value", "N/A")
            positive_detections = attributes.get("last_analysis_stats", {}).get("malicious", "N/A")
            
            last_mod_timestamp = attributes.get("last_modification_date")
            last_modification = "N/A"
            if last_mod_timestamp:
                last_modification = datetime.fromtimestamp(last_mod_timestamp).strftime("%m/%d/%y %H:%M")
            
            print(f"{item_id:<20} | {country:<5} | {threat_score:<12} | {positive_detections:<20} | {last_modification:<18}")
        print("-" * 110)
        
        # Save all results to a CSV file
        save_results_to_csv(results)
    else:
        print("\nNo results found or an error occurred during the search.")

if __name__ == "__main__":
    main()
